[{"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx":"1","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LayerContext.tsx":"2","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\reportWebVitals.js":"3","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx":"4","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationsProvider.tsx":"5","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationsContext.ts":"6","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\MinecraftMap.tsx":"7","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationTypeProvider.tsx":"8","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationTypesContext.ts":"9","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\index.ts":"10","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx":"11","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\MapsProvider.tsx":"12","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx":"13","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx":"14","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx":"15","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx":"16","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationFilter.tsx":"17","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmProvider.tsx":"18","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmContext.ts":"19","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx":"20","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LocationTypeMarker.tsx":"21","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\client.ts":"22","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx":"23","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmsProvider.tsx":"24","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmsContext.ts":"25","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\MapsContext.ts":"26","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\RealmSelectorPanel.tsx":"27","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\Realms.tsx":"28"},{"size":2193,"mtime":1641857269695,"results":"29","hashOfConfig":"30"},{"size":512,"mtime":1610671732108,"results":"31","hashOfConfig":"30"},{"size":375,"mtime":1609888774835,"results":"32","hashOfConfig":"30"},{"size":1730,"mtime":1641817210884,"results":"33","hashOfConfig":"30"},{"size":4125,"mtime":1641857861587,"results":"34","hashOfConfig":"30"},{"size":1156,"mtime":1641765847514,"results":"35","hashOfConfig":"30"},{"size":3527,"mtime":1641726747144,"results":"36","hashOfConfig":"30"},{"size":902,"mtime":1641818464803,"results":"37","hashOfConfig":"30"},{"size":546,"mtime":1641729075981,"results":"38","hashOfConfig":"30"},{"size":372,"mtime":1641818390407,"results":"39","hashOfConfig":"30"},{"size":1238,"mtime":1641728899301,"results":"40","hashOfConfig":"30"},{"size":704,"mtime":1641765847491,"results":"41","hashOfConfig":"30"},{"size":5182,"mtime":1641854686726,"results":"42","hashOfConfig":"30"},{"size":5675,"mtime":1641776388278,"results":"43","hashOfConfig":"30"},{"size":3791,"mtime":1641765847503,"results":"44","hashOfConfig":"30"},{"size":6211,"mtime":1641776381694,"results":"45","hashOfConfig":"30"},{"size":4200,"mtime":1641765847502,"results":"46","hashOfConfig":"30"},{"size":534,"mtime":1641765021004,"results":"47","hashOfConfig":"30"},{"size":397,"mtime":1641765021033,"results":"48","hashOfConfig":"30"},{"size":517,"mtime":1609904414798,"results":"49","hashOfConfig":"30"},{"size":4882,"mtime":1641774525786,"results":"50","hashOfConfig":"30"},{"size":21087,"mtime":1641854244236,"results":"51","hashOfConfig":"30"},{"size":2063,"mtime":1641765847508,"results":"52","hashOfConfig":"30"},{"size":1336,"mtime":1641857348955,"results":"53","hashOfConfig":"30"},{"size":671,"mtime":1641855380514,"results":"54","hashOfConfig":"30"},{"size":307,"mtime":1641765847514,"results":"55","hashOfConfig":"30"},{"size":1867,"mtime":1641857915848,"results":"56","hashOfConfig":"30"},{"size":1099,"mtime":1641856631134,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rtxqqd",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx",["119","120"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LayerContext.tsx",[],["121","122"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\reportWebVitals.js",[],["123","124"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationsProvider.tsx",["125","126"],"import { useEffect, useState, useCallback } from 'react';\r\nimport { LocationsContext } from \"../contexts/LocationsContext\";\r\nimport { LocationModel } from \"../api/client\";\r\nimport { ILocationFilter } from \"../components/LocationList/LocationFilter\";\r\nimport { useApi } from '../hooks/useApi';\r\nimport config from \"../config.json\";\r\nimport { INewLocation } from '../api/location';\r\nimport { NewLocationRequest, UpdateLocationRequest } from '../api/client';\r\nimport { useRealms } from \"../contexts/RealmsContext\";\r\nimport Guid from '../api/guid';\r\n\r\nexport interface ILocationsProviderProps {\r\n  filter?: ILocationFilter,\r\n  children: any\r\n}\r\n\r\nexport const LocationsProvider = ({filter, children}: ILocationsProviderProps) => {\r\n\r\n  const api = useApi();\r\n  const [allLocations, setAllLocations] = useState<LocationModel[]>([]);\r\n  const [currentFilter, setCurrentFilter] = useState<ILocationFilter|undefined>(filter);\r\n\r\n  const { currentRealm } = useRealms();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      \r\n      if (currentRealm) {\r\n        const realm = await api.getRealm(currentRealm.id);\r\n        setAllLocations(realm.locations||[]);    \r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [currentRealm])\r\n\r\n  const addLocation = (location: INewLocation) => {  \r\n    const postData = async (newLocation: NewLocationRequest) => {\r\n      const realm = await api.addLocation(currentRealm.id, newLocation);\r\n      setAllLocations(realm.locations||[]);\r\n    }\r\n\r\n    const newDataObj: NewLocationRequest = {\r\n      name: location.name,\r\n      x: location.coordinate.x,\r\n      y: location.coordinate.y,\r\n      z: location.coordinate.z,\r\n      locationTypeId: location.typeId,\r\n      hasAnvil: location.hasAnvil,\r\n      hasBed: location.hasBed,\r\n      hasEnchantmentTable: location.hasEnchantmentTable,\r\n      hasFurnace: location.hasFurnace,\r\n      hasEnderChest: location.hasEnderChest,\r\n      hasPortal: location.hasPortal,\r\n      notes: location.notes\r\n    }\r\n\r\n    postData(newDataObj);\r\n  }\r\n\r\n  const updateLocation = (locationId: Guid, location: UpdateLocationRequest) => {\r\n\r\n    const postData = async (locationId: Guid, location: UpdateLocationRequest) => {\r\n      const realm = await api.updateLocation(currentRealm.id, locationId, location);\r\n      setAllLocations(realm.locations||[]);\r\n    }\r\n\r\n    postData(locationId, location);\r\n  }\r\n\r\n  const deleteLocation = (id: Guid) => {\r\n\r\n    const deleteData = async (locationId: Guid) => {\r\n      const realm = await api.deleteLocation(currentRealm.id, locationId);\r\n      setAllLocations(realm.locations||[]);\r\n    }\r\n\r\n    deleteData(id);\r\n  }\r\n\r\n  const filteredLocations = useCallback(() : LocationModel[] => {\r\n    console.log('start filtered', allLocations);\r\n  \r\n    if (!currentFilter) {\r\n      console.log('no filter', allLocations)\r\n      return [...allLocations];\r\n    }\r\n\r\n    let tempLocations = [...allLocations];\r\n    tempLocations = tempLocations.filter(location => {\r\n                      \r\n          if (currentFilter.hasAnvil && !location.hasAnvil)\r\n              return false;\r\n          if (currentFilter.hasBed && !location.hasBed)\r\n              return false;\r\n          if (currentFilter.hasEnchantmentTable && !location.hasEnchantmentTable)\r\n              return false;\r\n          if (currentFilter.hasEnderChest && !location.hasEnderChest)\r\n              return false;\r\n          if (currentFilter.hasFurnace && !location.hasFurnace)\r\n              return false;\r\n          if (currentFilter.hasPortal && !location.hasPortal)\r\n              return false;\r\n          if (currentFilter.typeId && (location.typeId !== currentFilter.typeId))\r\n            return false;\r\n            \r\n          return true;\r\n      });\r\n\r\n      console.log('filter', tempLocations);\r\n      return tempLocations;\r\n  }, [allLocations, currentFilter]);\r\n\r\n  return (\r\n    <LocationsContext.Provider value={{ \r\n      locations: filteredLocations(), \r\n      filter: currentFilter, \r\n      setFilter: setCurrentFilter,\r\n      addLocation,\r\n      deleteLocation,\r\n      updateLocation\r\n    }}>\r\n      {children}\r\n    </LocationsContext.Provider>\r\n  )\r\n}","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationsContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\MinecraftMap.tsx",["127"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationTypeProvider.tsx",["128"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationTypesContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\index.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\MapsProvider.tsx",["129"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationFilter.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmProvider.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LocationTypeMarker.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\client.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx",[],["130","131"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmsProvider.tsx",["132"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmsContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\MapsContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\RealmSelectorPanel.tsx",["133","134"],"import { PrimaryButton, TextField, Stack, IStackItemStyles, IStackTokens } from 'office-ui-fabric-react';\r\nimport React from \"react\";\r\nimport { Realms } from './Realms';\r\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\r\nimport { useRealms } from '../../contexts/RealmsContext';\r\n\r\nconst stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      padding: 0,\r\n      paddingTop: 20,\r\n      paddingBottom: 40\r\n    },\r\n  };\r\n\r\nconst checkboxStackTokens: IStackTokens = {\r\n    childrenGap: 10,\r\n    padding: 20\r\n};\r\n\r\ninterface IRealmSelectorPanel {\r\n    dismissPanel: (() => void);\r\n    openPanel: (() => void);\r\n    isOpen: boolean;\r\n}\r\n\r\nconst RealmSelectorPanel: React.FC<IRealmSelectorPanel> = (props: IRealmSelectorPanel) => {\r\n\r\n    const { allRealms, currentRealm,  setCurrentRealm } = useRealms();\r\n   \r\n    return (\r\n        <Panel\r\n            headerText=\"Realm Selector\"\r\n            isOpen={props.isOpen}\r\n            onDismiss={props.dismissPanel}\r\n            closeButtonAriaLabel=\"Close\">\r\n            <Stack>\r\n                <Stack.Item>\r\n                    <TextField label=\"Current Realm\" value={currentRealm.name} readOnly={true} />\r\n                    <Realms \r\n                        value={currentRealm.id} onChange={(e, o) => {\r\n                            if (o) setCurrentRealm(o.key.toString())\r\n                            }} />\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                <Stack horizontal>\r\n                    <Stack.Item align=\"end\" styles={stackItemStyles}>\r\n                        <PrimaryButton text=\"Create\" onClick={() => { \r\n                                props.dismissPanel();\r\n                        }} />\r\n                    </Stack.Item>\r\n                </Stack>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport { RealmSelectorPanel };","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\Realms.tsx",[],{"ruleId":"135","severity":1,"message":"136","line":13,"column":8,"nodeType":"137","messageId":"138","endLine":13,"endColumn":23},{"ruleId":"135","severity":1,"message":"139","line":14,"column":8,"nodeType":"137","messageId":"138","endLine":14,"endColumn":14},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"135","severity":1,"message":"139","line":6,"column":8,"nodeType":"137","messageId":"138","endLine":6,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":35,"column":6,"nodeType":"148","endLine":35,"endColumn":20,"suggestions":"149"},{"ruleId":"135","severity":1,"message":"150","line":1,"column":22,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"147","line":24,"column":7,"nodeType":"148","endLine":24,"endColumn":9,"suggestions":"151"},{"ruleId":"146","severity":1,"message":"147","line":24,"column":6,"nodeType":"148","endLine":24,"endColumn":8,"suggestions":"152"},{"ruleId":"140","replacedBy":"153"},{"ruleId":"142","replacedBy":"154"},{"ruleId":"146","severity":1,"message":"147","line":29,"column":7,"nodeType":"148","endLine":29,"endColumn":9,"suggestions":"155"},{"ruleId":"135","severity":1,"message":"156","line":15,"column":7,"nodeType":"137","messageId":"138","endLine":15,"endColumn":40},{"ruleId":"135","severity":1,"message":"157","line":28,"column":13,"nodeType":"137","messageId":"138","endLine":28,"endColumn":22},"@typescript-eslint/no-unused-vars","'useLocalStorage' is defined but never used.","Identifier","unusedVar","'config' is defined but never used.","no-native-reassign",["158"],"no-negated-in-lhs",["159"],["158"],["159"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'api'. Either include it or remove the dependency array.","ArrayExpression",["160"],"'memo' is defined but never used.",["161"],["162"],["158"],["159"],["163"],"'checkboxStackTokens' is assigned a value but never used.","'allRealms' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"166","fix":"168"},{"desc":"166","fix":"169"},"Update the dependencies array to be: [api, currentRealm]",{"range":"170","text":"171"},"Update the dependencies array to be: [api]",{"range":"172","text":"173"},{"range":"174","text":"173"},{"range":"175","text":"173"},[1209,1223],"[api, currentRealm]",[690,692],"[api]",[582,584],[880,882]]