[{"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MinecraftMap.tsx":"1","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\context\\LayerContext.tsx":"2","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\DeleteButton.tsx":"3","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx":"4","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx":"5","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\CoordinateLabel.tsx":"6","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx":"7","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx":"8","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx":"9","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\CoordinateControl.tsx":"10","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx":"11","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx":"12","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\apiClient.ts":"13","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx":"14","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationTypeMarker.tsx":"15","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\EditButton.tsx":"16","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx":"17","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\OptionsDisplay.tsx":"18","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationFilter.tsx":"19"},{"size":2640,"mtime":1610181584531,"results":"20","hashOfConfig":"21"},{"size":514,"mtime":1609888774827,"results":"22","hashOfConfig":"21"},{"size":486,"mtime":1609991741165,"results":"23","hashOfConfig":"21"},{"size":2078,"mtime":1610260912280,"results":"24","hashOfConfig":"21"},{"size":3612,"mtime":1610179814662,"results":"25","hashOfConfig":"21"},{"size":517,"mtime":1610179883118,"results":"26","hashOfConfig":"21"},{"size":517,"mtime":1609904414798,"results":"27","hashOfConfig":"21"},{"size":5169,"mtime":1610261286879,"results":"28","hashOfConfig":"21"},{"size":5644,"mtime":1610258629362,"results":"29","hashOfConfig":"21"},{"size":2059,"mtime":1610088706751,"results":"30","hashOfConfig":"21"},{"size":1277,"mtime":1610080083525,"results":"31","hashOfConfig":"21"},{"size":2086,"mtime":1610155627814,"results":"32","hashOfConfig":"21"},{"size":5218,"mtime":1610245255902,"results":"33","hashOfConfig":"21"},{"size":4794,"mtime":1610258169375,"results":"34","hashOfConfig":"21"},{"size":3849,"mtime":1610268077125,"results":"35","hashOfConfig":"21"},{"size":466,"mtime":1610164082010,"results":"36","hashOfConfig":"21"},{"size":5677,"mtime":1610176610444,"results":"37","hashOfConfig":"21"},{"size":1655,"mtime":1610179528448,"results":"38","hashOfConfig":"21"},{"size":4222,"mtime":1610261238800,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ogjaha",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MinecraftMap.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\context\\LayerContext.tsx",[],["82","83"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\DeleteButton.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx",["84"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\CoordinateLabel.tsx",[],["85","86"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\CoordinateControl.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\apiClient.ts",["87"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx",["88","89","90"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationTypeMarker.tsx",["91","92"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\EditButton.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx",["93","94","95"],"import { PrimaryButton, TextField, Stack, IStackItemStyles, Separator, IStackTokens } from 'office-ui-fabric-react';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { CoordinateControl } from \"./CoordinateControl\";\r\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\r\nimport { Categories } from \"./Categories\";\r\nimport { ILocation, ICoordinate } from \"../../api/location\";\r\nimport { IUpdateLocationRequest } from \"../../api/apiClient\";\r\n\r\n\r\nconst stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      padding: 0,\r\n      paddingTop: 20,\r\n      paddingBottom: 40\r\n    },\r\n  };\r\n\r\nconst checkboxStackTokens: IStackTokens = {\r\n    childrenGap: 10,\r\n    padding: 20\r\n};\r\n\r\ninterface IEditLocationProps {\r\n    location: ILocation;\r\n    saveLocation: ((lLocation: IUpdateLocationRequest) => void)\r\n    dismissPanel: (() => void);\r\n    openPanel: (() => void);\r\n    isOpen: boolean;\r\n}\r\n\r\nconst CoordinateToString = (coordinate: ICoordinate) => {\r\n    return {\r\n        x: coordinate.x.toString(), \r\n        z: coordinate.z.toString(), \r\n        y: coordinate.y.toString()\r\n    };\r\n};\r\n\r\nconst EditLocation: React.FC<IEditLocationProps> = (props: IEditLocationProps) => {\r\n\r\n    const [ name, setName ] = useState(props.location.name);\r\n    const [ categoryId, setCategoryId ] = useState(props.location.typeId);\r\n    const [ coordinate, setCoordinate ] = useState(CoordinateToString(props.location.coordinate));\r\n    const [ hasAnvil, setAnvil ] = useState(props.location.hasAnvil);\r\n    const [ hasBed, setBed ] = useState(props.location.hasBed)\r\n    const [ hasPortal, setPortal ] = useState(props.location.hasPortal);\r\n    const [ hasEnderChest, setEnderChest ] = useState(props.location.hasEnderChest);\r\n    const [ hasEnchantmentTable, setEnchantmentTable ] = useState(props.location.hasEnchantmentTable);\r\n    const [ hasFurnace, setFurnace ] = useState(props.location.hasFurnace);\r\n    const [ notes, setNotes] = useState(props.location.notes);\r\n\r\n    return (\r\n        <Panel\r\n            headerText=\"Edit Location\"\r\n            isOpen={props.isOpen}\r\n            onDismiss={props.dismissPanel}\r\n            closeButtonAriaLabel=\"Close\">\r\n            <Stack>\r\n                <Stack.Item>\r\n                    <TextField label=\"Name\" required={true} value={name} onChange={(e, newValue) => setName(newValue ? newValue : \"\")}/>\r\n                    <Categories value={categoryId} onChange={(e, o) => {\r\n                        if (o) setCategoryId(o.key.toString())\r\n                        }} />\r\n                    <CoordinateControl x={coordinate.x} y={coordinate.y} z={coordinate.z} onChange={(coord) => {\r\n                        setCoordinate({ x: coord.x.toString(), y: coord.y.toString(), z: coord.z.toString() })\r\n                    }} />\r\n                    <Separator>Options</Separator>\r\n                    <Stack tokens={checkboxStackTokens}>\r\n                        <Checkbox label=\"Anvil\" checked={hasAnvil} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setAnvil(!!checked)} />\r\n                        <Checkbox label=\"Bed\" checked={hasBed} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setBed(!!checked)} />\r\n                        <Checkbox label=\"Enchantment Table\" checked={hasEnchantmentTable} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnchantmentTable(!!checked)} />\r\n                        <Checkbox label=\"Ender Chest\" checked={hasEnderChest} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnderChest(!!checked)} />\r\n                        <Checkbox label=\"Furnace\" checked={hasFurnace} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setFurnace(!!checked)} />\r\n                        <Checkbox label=\"Portal\" checked={hasPortal} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setPortal(!!checked)} />\r\n                    </Stack>\r\n                    \r\n                    <Stack horizontal>\r\n                        <Stack.Item align=\"end\" styles={stackItemStyles}>\r\n                            <PrimaryButton text=\"Save\" onClick={() => { \r\n                                props.saveLocation(\r\n                                {\r\n                                    id: props.location.id,\r\n                                    name: name,\r\n                                    x: Number.parseInt(coordinate.x),\r\n                                    y: Number.parseInt(coordinate.y),\r\n                                    z: Number.parseInt(coordinate.z),\r\n                                    locationTypeId: categoryId,\r\n                                    hasAnvil: hasAnvil,\r\n                                    hasBed: hasBed,\r\n                                    hasEnchantmentTable: hasEnchantmentTable,\r\n                                    hasEnderChest: hasEnderChest,\r\n                                    hasPortal: hasPortal,\r\n                                    hasFurnace: hasFurnace,\r\n                                    notes: notes ? notes : \"\"\r\n                                });\r\n                                props.dismissPanel();\r\n                            }} />\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport { EditLocation };","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\OptionsDisplay.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationFilter.tsx",["96","97","98"],"import React, { useEffect, useState } from \"react\";\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Stack, IStackTokens, IStackItemStyles, Text, IStackStyles, Separator, PrimaryButton, DefaultButton } from 'office-ui-fabric-react';\r\nimport { Categories } from \"../Location/Categories\";\r\nimport Guid from \"../../api/guid\";\r\n\r\nconst checkboxStackTokens: IStackTokens = {\r\n    childrenGap: 10,\r\n    padding: 20\r\n};\r\n\r\nconst stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      padding: 0,\r\n      paddingTop: 20,\r\n      paddingBottom: 40\r\n    },\r\n  };\r\n\r\nexport interface ILocationFilter {\r\n    hasAnvil: boolean;\r\n    hasBed: boolean;\r\n    hasPortal: boolean;\r\n    hasEnderChest: boolean;\r\n    hasEnchantmentTable: boolean;\r\n    hasFurnace: boolean;\r\n    typeId: Guid;\r\n}\r\n\r\ninterface ILocationsFilterProps {\r\n    onFilter: ((filter: ILocationFilter) => void)\r\n}\r\n\r\nexport const LocationsFilter: React.FC<ILocationsFilterProps> = (props: ILocationsFilterProps) => {\r\n\r\n    const [ categoryId, setCategoryId ] = useState(\"\");\r\n\r\n    const [ hasAnvil, setAnvil ] = useState(false);\r\n    const [ hasBed, setBed ] = useState(false)\r\n    const [ hasPortal, setPortal ] = useState(false);\r\n    const [ hasEnderChest, setEnderChest ] = useState(false);\r\n    const [ hasEnchantmentTable, setEnchantmentTable ] = useState(false);\r\n    const [ hasFurnace, setFurnace ] = useState(false); \r\n\r\n    const clear = () => {\r\n        setAnvil(false);\r\n        setBed(false);\r\n        setPortal(false);\r\n        setEnderChest(false);\r\n        setEnchantmentTable(false);\r\n        setFurnace(false);\r\n        setCategoryId(\"\");\r\n\r\n        props.onFilter({\r\n            hasAnvil: false,\r\n            hasBed: false,\r\n            hasPortal: false,\r\n            hasEnderChest: false,\r\n            hasEnchantmentTable: false,\r\n            hasFurnace: false,\r\n            typeId: \"\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Stack tokens={checkboxStackTokens}>\r\n            <Text>Filter</Text>\r\n            <Categories value={categoryId} onChange={(e, o) => {\r\n                        if (o) setCategoryId(o.key.toString())\r\n                        }} />\r\n            <Checkbox label=\"Anvil\" checked={hasAnvil} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setAnvil(!!checked)} />\r\n            <Checkbox label=\"Bed\" checked={hasBed} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setBed(!!checked)} />\r\n            <Checkbox label=\"Enchantment Table\" checked={hasEnchantmentTable} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnchantmentTable(!!checked)} />\r\n            <Checkbox label=\"Ender Chest\" checked={hasEnderChest} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnderChest(!!checked)} />\r\n            <Checkbox label=\"Furnace\" checked={hasFurnace} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setFurnace(!!checked)} />\r\n            <Checkbox label=\"Portal\" checked={hasPortal} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setPortal(!!checked)} />\r\n            <Stack.Item>\r\n                <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                    <Stack.Item align=\"end\" styles={stackItemStyles}>\r\n                        <DefaultButton text=\"Clear\" onClick={() => clear()}/>\r\n                    </Stack.Item>\r\n                    <Stack.Item align=\"end\" styles={stackItemStyles}>\r\n                        <PrimaryButton text=\"Filter\" onClick={() => props.onFilter({\r\n                            hasAnvil,\r\n                            hasBed,\r\n                            hasPortal,\r\n                            hasEnderChest,\r\n                            hasEnchantmentTable,\r\n                            hasFurnace,\r\n                            typeId: categoryId\r\n                        })} />\r\n                    </Stack.Item>\r\n                </Stack>\r\n            </Stack.Item>\r\n        </Stack>\r\n    )\r\n}",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":6,"column":10,"nodeType":"105","messageId":"106","endLine":6,"endColumn":18},{"ruleId":"99","replacedBy":"107"},{"ruleId":"101","replacedBy":"108"},{"ruleId":"103","severity":1,"message":"109","line":7,"column":10,"nodeType":"105","messageId":"106","endLine":7,"endColumn":32},{"ruleId":"103","severity":1,"message":"110","line":27,"column":7,"nodeType":"105","messageId":"106","endLine":27,"endColumn":33},{"ruleId":"103","severity":1,"message":"111","line":138,"column":7,"nodeType":"105","messageId":"106","endLine":138,"endColumn":19},{"ruleId":"103","severity":1,"message":"112","line":139,"column":7,"nodeType":"105","messageId":"106","endLine":139,"endColumn":23},{"ruleId":"103","severity":1,"message":"113","line":6,"column":39,"nodeType":"105","messageId":"106","endLine":6,"endColumn":53},{"ruleId":"103","severity":1,"message":"114","line":10,"column":10,"nodeType":"105","messageId":"106","endLine":10,"endColumn":26},{"ruleId":"103","severity":1,"message":"115","line":2,"column":17,"nodeType":"105","messageId":"106","endLine":2,"endColumn":26},{"ruleId":"103","severity":1,"message":"116","line":3,"column":20,"nodeType":"105","messageId":"106","endLine":3,"endColumn":34},{"ruleId":"103","severity":1,"message":"117","line":51,"column":20,"nodeType":"105","messageId":"106","endLine":51,"endColumn":28},{"ruleId":"103","severity":1,"message":"115","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"118","line":3,"column":55,"nodeType":"105","messageId":"106","endLine":3,"endColumn":67},{"ruleId":"103","severity":1,"message":"119","line":3,"column":69,"nodeType":"105","messageId":"106","endLine":3,"endColumn":78},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["120"],["121"],"'initializeComponentRef' is defined but never used.","'mapImageProps' is assigned a value but never used.","'toggleStyles' is assigned a value but never used.","'iconButtonStyles' is assigned a value but never used.","'setIconOptions' is defined but never used.","'setConstantValue' is defined but never used.","'useEffect' is defined but never used.","'ICheckboxProps' is defined but never used.","'setNotes' is assigned a value but never used.","'IStackStyles' is defined but never used.","'Separator' is defined but never used.","no-global-assign","no-unsafe-negation"]