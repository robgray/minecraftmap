[{"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx":"1","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LayerContext.tsx":"2","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\reportWebVitals.js":"3","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx":"4","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationsProvider.tsx":"5","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationsContext.ts":"6","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\MinecraftMap.tsx":"7","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationTypeProvider.tsx":"8","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationTypesContext.ts":"9","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\index.ts":"10","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx":"11","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\MapsProvider.tsx":"12","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx":"13","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx":"14","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx":"15","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx":"16","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationFilter.tsx":"17","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmProvider.tsx":"18","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmContext.ts":"19","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx":"20","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LocationTypeMarker.tsx":"21","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\client.ts":"22","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx":"23","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmsProvider.tsx":"24","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmsContext.ts":"25","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\MapsContext.ts":"26","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\RealmSelectorPanel.tsx":"27","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\Realms.tsx":"28","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\EditButton.tsx":"29","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\OptionsDisplay.tsx":"30","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\hooks\\useEventListener.ts":"31","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\hooks\\useApi.ts":"32","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\hooks\\useLocalStorage.ts":"33","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\DeleteButton.tsx":"34","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\CoordinateLabel.tsx":"35"},{"size":2100,"mtime":1642117060631,"results":"36","hashOfConfig":"37"},{"size":512,"mtime":1610671732108,"results":"38","hashOfConfig":"37"},{"size":375,"mtime":1609888774835,"results":"39","hashOfConfig":"37"},{"size":1730,"mtime":1641817210884,"results":"40","hashOfConfig":"37"},{"size":3952,"mtime":1642118599926,"results":"41","hashOfConfig":"37"},{"size":1156,"mtime":1641765847514,"results":"42","hashOfConfig":"37"},{"size":3527,"mtime":1641726747144,"results":"43","hashOfConfig":"37"},{"size":902,"mtime":1641818464803,"results":"44","hashOfConfig":"37"},{"size":546,"mtime":1641765847513,"results":"45","hashOfConfig":"37"},{"size":372,"mtime":1641858285711,"results":"46","hashOfConfig":"37"},{"size":1178,"mtime":1642118611118,"results":"47","hashOfConfig":"37"},{"size":704,"mtime":1641765847491,"results":"48","hashOfConfig":"37"},{"size":5182,"mtime":1641854686726,"results":"49","hashOfConfig":"37"},{"size":5675,"mtime":1641776388278,"results":"50","hashOfConfig":"37"},{"size":3791,"mtime":1641765847503,"results":"51","hashOfConfig":"37"},{"size":6211,"mtime":1641776381694,"results":"52","hashOfConfig":"37"},{"size":4200,"mtime":1641765847502,"results":"53","hashOfConfig":"37"},{"size":534,"mtime":1641765847492,"results":"54","hashOfConfig":"37"},{"size":397,"mtime":1641765021033,"results":"55","hashOfConfig":"37"},{"size":517,"mtime":1609904414798,"results":"56","hashOfConfig":"37"},{"size":4882,"mtime":1641774525786,"results":"57","hashOfConfig":"37"},{"size":21087,"mtime":1641858285713,"results":"58","hashOfConfig":"37"},{"size":2063,"mtime":1641765847508,"results":"59","hashOfConfig":"37"},{"size":1285,"mtime":1642116559730,"results":"60","hashOfConfig":"37"},{"size":671,"mtime":1641858285720,"results":"61","hashOfConfig":"37"},{"size":307,"mtime":1641765847514,"results":"62","hashOfConfig":"37"},{"size":1838,"mtime":1642118750649,"results":"63","hashOfConfig":"37"},{"size":1099,"mtime":1641858285718,"results":"64","hashOfConfig":"37"},{"size":641,"mtime":1610338636772,"results":"65","hashOfConfig":"37"},{"size":1660,"mtime":1641765847505,"results":"66","hashOfConfig":"37"},{"size":1251,"mtime":1641858285725,"results":"67","hashOfConfig":"37"},{"size":155,"mtime":1642114960688,"results":"68","hashOfConfig":"37"},{"size":2853,"mtime":1642118680678,"results":"69","hashOfConfig":"37"},{"size":2388,"mtime":1610338628268,"results":"70","hashOfConfig":"37"},{"size":523,"mtime":1641765847501,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rtxqqd",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LayerContext.tsx",[],["150","151"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\reportWebVitals.js",[],["152","153"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationsProvider.tsx",["154"],"import { useEffect, useState, useCallback } from 'react';\r\nimport { LocationsContext } from \"../contexts/LocationsContext\";\r\nimport { LocationModel } from \"../api/client\";\r\nimport { ILocationFilter } from \"../components/LocationList/LocationFilter\";\r\nimport { useApi } from '../hooks/useApi';\r\nimport { INewLocation } from '../api/location';\r\nimport { NewLocationRequest, UpdateLocationRequest } from '../api/client';\r\nimport { useRealms } from \"../contexts/RealmsContext\";\r\nimport Guid from '../api/guid';\r\n\r\nexport interface ILocationsProviderProps {\r\n  filter?: ILocationFilter,\r\n  children: any\r\n}\r\n\r\nexport const LocationsProvider = ({filter, children}: ILocationsProviderProps) => {\r\n\r\n  const api = useApi();\r\n  const [allLocations, setAllLocations] = useState<LocationModel[]>([]);\r\n  const [currentFilter, setCurrentFilter] = useState<ILocationFilter|undefined>(filter);\r\n\r\n  const { currentRealm } = useRealms();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      \r\n      if (currentRealm) {\r\n        const realm = await api.getRealm(currentRealm.id);\r\n        setAllLocations(realm.locations||[]);    \r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [currentRealm])\r\n\r\n  const addLocation = (location: INewLocation) => {  \r\n    const postData = async (newLocation: NewLocationRequest) => {\r\n      const realm = await api.addLocation(currentRealm.id, newLocation);\r\n      setAllLocations(realm.locations||[]);\r\n    }\r\n\r\n    const newDataObj: NewLocationRequest = {\r\n      name: location.name,\r\n      x: location.coordinate.x,\r\n      y: location.coordinate.y,\r\n      z: location.coordinate.z,\r\n      locationTypeId: location.typeId,\r\n      hasAnvil: location.hasAnvil,\r\n      hasBed: location.hasBed,\r\n      hasEnchantmentTable: location.hasEnchantmentTable,\r\n      hasFurnace: location.hasFurnace,\r\n      hasEnderChest: location.hasEnderChest,\r\n      hasPortal: location.hasPortal,\r\n      notes: location.notes\r\n    }\r\n\r\n    postData(newDataObj);\r\n  }\r\n\r\n  const updateLocation = (locationId: Guid, location: UpdateLocationRequest) => {\r\n\r\n    const postData = async (locationId: Guid, location: UpdateLocationRequest) => {\r\n      const realm = await api.updateLocation(currentRealm.id, locationId, location);\r\n      setAllLocations(realm.locations||[]);\r\n    }\r\n\r\n    postData(locationId, location);\r\n  }\r\n\r\n  const deleteLocation = (id: Guid) => {\r\n\r\n    const deleteData = async (locationId: Guid) => {\r\n      const realm = await api.deleteLocation(currentRealm.id, locationId);\r\n      setAllLocations(realm.locations||[]);\r\n    }\r\n\r\n    deleteData(id);\r\n  }\r\n\r\n  const filteredLocations = useCallback(() : LocationModel[] => {\r\n  \r\n    if (!currentFilter) {\r\n      return [...allLocations];\r\n    }\r\n\r\n    let tempLocations = [...allLocations];\r\n    tempLocations = tempLocations.filter(location => {\r\n                      \r\n          if (currentFilter.hasAnvil && !location.hasAnvil)\r\n              return false;\r\n          if (currentFilter.hasBed && !location.hasBed)\r\n              return false;\r\n          if (currentFilter.hasEnchantmentTable && !location.hasEnchantmentTable)\r\n              return false;\r\n          if (currentFilter.hasEnderChest && !location.hasEnderChest)\r\n              return false;\r\n          if (currentFilter.hasFurnace && !location.hasFurnace)\r\n              return false;\r\n          if (currentFilter.hasPortal && !location.hasPortal)\r\n              return false;\r\n          if (currentFilter.typeId && (location.typeId !== currentFilter.typeId))\r\n            return false;\r\n            \r\n          return true;\r\n      });\r\n      \r\n      return tempLocations;\r\n  }, [allLocations, currentFilter]);\r\n\r\n  return (\r\n    <LocationsContext.Provider value={{ \r\n      locations: filteredLocations(), \r\n      filter: currentFilter, \r\n      setFilter: setCurrentFilter,\r\n      addLocation,\r\n      deleteLocation,\r\n      updateLocation\r\n    }}>\r\n      {children}\r\n    </LocationsContext.Provider>\r\n  )\r\n}","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationsContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\MinecraftMap.tsx",["155"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\LocationTypeProvider.tsx",["156"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\LocationTypesContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\index.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\MapsProvider.tsx",["157"],"import { useState, useEffect } from 'react';\r\nimport { MapsContext } from \"../contexts/MapsContext\";\r\nimport { MapModel } from \"../api/client\";\r\nimport { useApi } from '../hooks/useApi';\r\n\r\nexport interface IMapsProviderProps \r\n{\r\n  children: any;\r\n}\r\n\r\nexport const MapsProvider = ({children}: IMapsProviderProps) => {\r\n\r\n  const [currentMaps, setCurrentMaps] = useState<MapModel[]>([]);\r\n  const api = useApi();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const maps = await api.getMaps(7);\r\n      setCurrentMaps(maps);\r\n    }\r\n  \r\n    fetchData();\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <MapsContext.Provider value={currentMaps}>\r\n      {children}\r\n    </MapsContext.Provider>\r\n  )\r\n}\r\n",["158","159"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationFilter.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmProvider.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\map\\LocationTypeMarker.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\client.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx",[],["160","161"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\Providers\\RealmsProvider.tsx",["162"],"import { useCallback, useEffect, useState } from 'react';\r\nimport { RealmsContext } from \"../contexts/RealmsContext\";\r\nimport { RealmOnlyModel } from \"../api/client\";\r\nimport { useApi } from \"../hooks/useApi\";\r\nimport Guid from '../api/guid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nexport interface IRealmsProviderProps\r\n{\r\n  children: any;\r\n}\r\n\r\nexport const RealmsProvider = ({children}: IRealmsProviderProps) => {\r\n\r\n  const [realmId, setRealmId] = useLocalStorage(\"realmId\", \"\");\r\n  const [allRealms, setAllRealms] = useState<RealmOnlyModel[]>([]);\r\n  const [ id, setId ] = useState<Guid>(realmId);\r\n  const api = useApi();\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      const returnedRealms = await api.getRealms();\r\n      setAllRealms(returnedRealms);\r\n    }\r\n\r\n    load();\r\n    \r\n   }, []);\r\n\r\n  const getCurrentRealm = useCallback(() => {\r\n    return allRealms.filter(r => r.id.toUpperCase() === id.toUpperCase())[0]; \r\n  }, [id, allRealms]);\r\n\r\n  const setCurrentRealmId = (realmId: Guid) => {\r\n\r\n    setRealmId(realmId);\r\n    setId(realmId);\r\n  }\r\n\r\n  return (\r\n    <RealmsContext.Provider value={{ allRealms, currentRealm: getCurrentRealm(), setCurrentRealm: setCurrentRealmId}}>\r\n      {children}\r\n    </RealmsContext.Provider>\r\n  )\r\n}\r\n","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\RealmsContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\contexts\\MapsContext.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\RealmSelectorPanel.tsx",["163"],"import { Stack, Text } from 'office-ui-fabric-react';\r\nimport React from \"react\";\r\nimport { Realms } from './Realms';\r\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\r\nimport { useRealms } from '../../contexts/RealmsContext';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets\r\n  } from 'office-ui-fabric-react';\r\n\r\ninterface IRealmSelectorPanel {\r\n    dismissPanel: (() => void);\r\n    openPanel: (() => void);\r\n    isOpen: boolean;\r\n}\r\n\r\nconst RealmSelectorPanel: React.FC<IRealmSelectorPanel> = (props: IRealmSelectorPanel) => {\r\n\r\n    const { currentRealm,  setCurrentRealm } = useRealms();\r\n   \r\n    return (\r\n        <Panel\r\n            headerText=\"Realm Selector\"\r\n            isOpen={props.isOpen}\r\n            onDismiss={props.dismissPanel}\r\n            closeButtonAriaLabel=\"Close\">\r\n            <Stack>\r\n                <Stack.Item>\r\n                    <div className={contentStyles.currentRealm}>\r\n                        <Text variant=\"medium\"><b>Current Realm</b></Text><br/>\r\n                        {!currentRealm && (<Text variant=\"mediumPlus\">Please set your realm</Text>)}\r\n                        {currentRealm && (<Text variant=\"mediumPlus\">{currentRealm.name}</Text>)}\r\n                    </div>\r\n                    <Realms \r\n                        value={currentRealm?.id||\"\"} onChange={(e, o) => {\r\n                            if (o) { \r\n                                setCurrentRealm(o.key.toString());\r\n                                props.dismissPanel();\r\n                            }\r\n                            }} />\r\n                </Stack.Item>\r\n                \r\n            </Stack>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n  currentRealm: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"20px\"\r\n  }\r\n});\r\n\r\nexport { RealmSelectorPanel };","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Realm\\Realms.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\EditButton.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\OptionsDisplay.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\hooks\\useEventListener.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\hooks\\useApi.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\hooks\\useLocalStorage.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\DeleteButton.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\CoordinateLabel.tsx",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":34,"column":6,"nodeType":"172","endLine":34,"endColumn":20,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":22,"nodeType":"176","messageId":"177","endLine":1,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":24,"column":7,"nodeType":"172","endLine":24,"endColumn":9,"suggestions":"178"},{"ruleId":"170","severity":1,"message":"171","line":24,"column":6,"nodeType":"172","endLine":24,"endColumn":8,"suggestions":"179"},{"ruleId":"164","replacedBy":"180"},{"ruleId":"166","replacedBy":"181"},{"ruleId":"164","replacedBy":"182"},{"ruleId":"166","replacedBy":"183"},{"ruleId":"170","severity":1,"message":"171","line":28,"column":7,"nodeType":"172","endLine":28,"endColumn":9,"suggestions":"184"},{"ruleId":"174","severity":1,"message":"185","line":48,"column":7,"nodeType":"176","messageId":"177","endLine":48,"endColumn":12},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],["186"],["187"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'api'. Either include it or remove the dependency array.","ArrayExpression",["188"],"@typescript-eslint/no-unused-vars","'memo' is defined but never used.","Identifier","unusedVar",["189"],["190"],["186"],["187"],["186"],["187"],["191"],"'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"194","fix":"196"},{"desc":"194","fix":"197"},"Update the dependencies array to be: [api, currentRealm]",{"range":"198","text":"199"},"Update the dependencies array to be: [api]",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"201"},[1171,1185],"[api, currentRealm]",[690,692],"[api]",[582,584],[829,831]]