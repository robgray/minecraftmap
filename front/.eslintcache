[{"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MinecraftMap.tsx":"1","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\context\\LayerContext.tsx":"2","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\DeleteButton.tsx":"3","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx":"4","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx":"5","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\CoordinateLabel.tsx":"6","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx":"7","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx":"8","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx":"9","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\CoordinateControl.tsx":"10","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx":"11","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx":"12","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\apiClient.ts":"13","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx":"14","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationTypeMarker.tsx":"15","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\EditButton.tsx":"16","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx":"17","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\OptionsDisplay.tsx":"18"},{"size":2640,"mtime":1610181584531,"results":"19","hashOfConfig":"20"},{"size":514,"mtime":1609888774827,"results":"21","hashOfConfig":"20"},{"size":486,"mtime":1609991741165,"results":"22","hashOfConfig":"20"},{"size":1804,"mtime":1610176418770,"results":"23","hashOfConfig":"20"},{"size":3612,"mtime":1610179814662,"results":"24","hashOfConfig":"20"},{"size":517,"mtime":1610179883118,"results":"25","hashOfConfig":"20"},{"size":517,"mtime":1609904414798,"results":"26","hashOfConfig":"20"},{"size":4070,"mtime":1610177634602,"results":"27","hashOfConfig":"20"},{"size":5728,"mtime":1610165134664,"results":"28","hashOfConfig":"20"},{"size":2059,"mtime":1610088706751,"results":"29","hashOfConfig":"20"},{"size":1277,"mtime":1610080083525,"results":"30","hashOfConfig":"20"},{"size":2086,"mtime":1610155627814,"results":"31","hashOfConfig":"20"},{"size":5158,"mtime":1610177558897,"results":"32","hashOfConfig":"20"},{"size":2418,"mtime":1610145043018,"results":"33","hashOfConfig":"20"},{"size":2869,"mtime":1610238434723,"results":"34","hashOfConfig":"20"},{"size":466,"mtime":1610164082010,"results":"35","hashOfConfig":"20"},{"size":5677,"mtime":1610176610444,"results":"36","hashOfConfig":"20"},{"size":1655,"mtime":1610179528448,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ogjaha",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MinecraftMap.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\context\\LayerContext.tsx",[],["79","80"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\DeleteButton.tsx",[],["81","82"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationsList.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\LocationListItem.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\CoordinateLabel.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\index.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\App.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\AddLocation.tsx",["83","84","85"],"import { PrimaryButton, TextField, Stack, IStackItemStyles, Separator, IStackTokens } from 'office-ui-fabric-react';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ActionButton, IIconProps } from 'office-ui-fabric-react';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { CoordinateControl } from \"./CoordinateControl\";\r\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\r\nimport { Categories } from \"./Categories\";\r\nimport { INewLocation } from \"../../api/location\";\r\n\r\n\r\nconst stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      padding: 0,\r\n      paddingTop: 20,\r\n      paddingBottom: 40\r\n    },\r\n  };\r\n\r\nconst checkboxStackTokens: IStackTokens = {\r\n    childrenGap: 10,\r\n    padding: 20\r\n};\r\n\r\ninterface IAddLocationProps {\r\n    saveNewLocation: ((newLocation: INewLocation) => void)\r\n    dismissPanel: (() => void);\r\n    openPanel: (() => void);\r\n    isOpen: boolean;\r\n}\r\n\r\nconst AddLocation: React.FC<IAddLocationProps> = (props: IAddLocationProps) => {\r\n\r\n    const [ name, setName ] = useState(\"\");\r\n    const [ categoryId, setCategoryId ] = useState(\"\");\r\n    const [ coordinate, setCoordinate ] = useState({ x: \"\", z: \"\", y: \"\" });\r\n    const [ hasAnvil, setAnvil ] = useState(false);\r\n    const [ hasBed, setBed ] = useState(false)\r\n    const [ hasPortal, setPortal ] = useState(false);\r\n    const [ hasEnderChest, setEnderChest ] = useState(false);\r\n    const [ hasEnchantmentTable, setEnchantmentTable ] = useState(false);\r\n    const [ hasFurnace, setFurnace ] = useState(false);\r\n    const [ notes, setNotes] = useState(\"\");\r\n\r\n    const clearPanel = () => {\r\n        setName(\"\");\r\n        setCategoryId(\"\");\r\n        setCoordinate({ x: \"\", z: \"\", y: \"\"});\r\n        setAnvil(false);\r\n        setBed(false);\r\n        setEnderChest(false);\r\n        setEnchantmentTable(false);\r\n        setPortal(false);\r\n        setFurnace(false);\r\n        setNotes(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        clearPanel();\r\n    }, []);\r\n\r\n    return (\r\n        <Panel\r\n            headerText=\"Add Location\"\r\n            isOpen={props.isOpen}\r\n            onDismiss={props.dismissPanel}\r\n            closeButtonAriaLabel=\"Close\">\r\n            <Stack>\r\n                <Stack.Item>\r\n                    <TextField label=\"Name\" required={true} value={name} onChange={(e, newValue) => setName(newValue ? newValue : \"\")}/>\r\n                    <Categories value={categoryId} onChange={(e, o) => {\r\n                        if (o) setCategoryId(o.key.toString())\r\n                        }} />\r\n                    <CoordinateControl x={coordinate.x} y={coordinate.y} z={coordinate.z} onChange={(coord) => {\r\n                        setCoordinate({ x: coord.x.toString(), y: coord.y.toString(), z: coord.z.toString() })\r\n                    }} />\r\n                    <Separator>Options</Separator>\r\n                    <Stack tokens={checkboxStackTokens}>\r\n                        <Checkbox label=\"Anvil\" checked={hasAnvil} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setAnvil(!!checked)} />\r\n                        <Checkbox label=\"Bed\" checked={hasBed} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setBed(!!checked)} />\r\n                        <Checkbox label=\"Enchantment Table\" checked={hasEnchantmentTable} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnchantmentTable(!!checked)} />\r\n                        <Checkbox label=\"Ender Chest\" checked={hasEnderChest} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnderChest(!!checked)} />\r\n                        <Checkbox label=\"Furnace\" checked={hasFurnace} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setFurnace(!!checked)} />\r\n                        <Checkbox label=\"Portal\" checked={hasPortal} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setPortal(!!checked)} />\r\n                    </Stack>\r\n                    <TextField label=\"Notes\" multiline rows={5} value={notes} onChange={(e, newValue) => setNotes(newValue ? newValue : \"\")} />\r\n                    <Stack horizontal>\r\n                        <Stack.Item align=\"end\" styles={stackItemStyles}>\r\n                            <PrimaryButton text=\"Save\" onClick={() => { \r\n                                props.saveNewLocation(\r\n                                {\r\n                                    name: name,\r\n                                    coordinate: { \r\n                                        x: Number.parseInt(coordinate.x),\r\n                                        y: Number.parseInt(coordinate.y),\r\n                                        z: Number.parseInt(coordinate.z)\r\n                                    },\r\n                                    typeId: categoryId,\r\n                                    hasAnvil: hasAnvil,\r\n                                    hasBed: hasBed,\r\n                                    hasEnchantmentTable: hasEnchantmentTable,\r\n                                    hasEnderChest: hasEnderChest,\r\n                                    hasPortal: hasPortal,\r\n                                    hasFurnace: hasFurnace\r\n                                });\r\n                                props.dismissPanel();\r\n                            }} />\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport { AddLocation };","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\CoordinateControl.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\Categories.tsx",[],["86","87"],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\ZoomToCoordinate.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\api\\apiClient.ts",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\MenuBar.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationTypeMarker.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\EditButton.tsx",[],"C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\Location\\EditLocation.tsx",["88","89","90"],"import { PrimaryButton, TextField, Stack, IStackItemStyles, Separator, IStackTokens } from 'office-ui-fabric-react';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { CoordinateControl } from \"./CoordinateControl\";\r\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\r\nimport { Categories } from \"./Categories\";\r\nimport { ILocation, ICoordinate } from \"../../api/location\";\r\nimport { IUpdateLocationRequest } from \"../../api/apiClient\";\r\n\r\n\r\nconst stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      padding: 0,\r\n      paddingTop: 20,\r\n      paddingBottom: 40\r\n    },\r\n  };\r\n\r\nconst checkboxStackTokens: IStackTokens = {\r\n    childrenGap: 10,\r\n    padding: 20\r\n};\r\n\r\ninterface IEditLocationProps {\r\n    location: ILocation;\r\n    saveLocation: ((lLocation: IUpdateLocationRequest) => void)\r\n    dismissPanel: (() => void);\r\n    openPanel: (() => void);\r\n    isOpen: boolean;\r\n}\r\n\r\nconst CoordinateToString = (coordinate: ICoordinate) => {\r\n    return {\r\n        x: coordinate.x.toString(), \r\n        z: coordinate.z.toString(), \r\n        y: coordinate.y.toString()\r\n    };\r\n};\r\n\r\nconst EditLocation: React.FC<IEditLocationProps> = (props: IEditLocationProps) => {\r\n\r\n    const [ name, setName ] = useState(props.location.name);\r\n    const [ categoryId, setCategoryId ] = useState(props.location.typeId);\r\n    const [ coordinate, setCoordinate ] = useState(CoordinateToString(props.location.coordinate));\r\n    const [ hasAnvil, setAnvil ] = useState(props.location.hasAnvil);\r\n    const [ hasBed, setBed ] = useState(props.location.hasBed)\r\n    const [ hasPortal, setPortal ] = useState(props.location.hasPortal);\r\n    const [ hasEnderChest, setEnderChest ] = useState(props.location.hasEnderChest);\r\n    const [ hasEnchantmentTable, setEnchantmentTable ] = useState(props.location.hasEnchantmentTable);\r\n    const [ hasFurnace, setFurnace ] = useState(props.location.hasFurnace);\r\n    const [ notes, setNotes] = useState(props.location.notes);\r\n\r\n    return (\r\n        <Panel\r\n            headerText=\"Edit Location\"\r\n            isOpen={props.isOpen}\r\n            onDismiss={props.dismissPanel}\r\n            closeButtonAriaLabel=\"Close\">\r\n            <Stack>\r\n                <Stack.Item>\r\n                    <TextField label=\"Name\" required={true} value={name} onChange={(e, newValue) => setName(newValue ? newValue : \"\")}/>\r\n                    <Categories value={categoryId} onChange={(e, o) => {\r\n                        if (o) setCategoryId(o.key.toString())\r\n                        }} />\r\n                    <CoordinateControl x={coordinate.x} y={coordinate.y} z={coordinate.z} onChange={(coord) => {\r\n                        setCoordinate({ x: coord.x.toString(), y: coord.y.toString(), z: coord.z.toString() })\r\n                    }} />\r\n                    <Separator>Options</Separator>\r\n                    <Stack tokens={checkboxStackTokens}>\r\n                        <Checkbox label=\"Anvil\" checked={hasAnvil} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setAnvil(!!checked)} />\r\n                        <Checkbox label=\"Bed\" checked={hasBed} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setBed(!!checked)} />\r\n                        <Checkbox label=\"Enchantment Table\" checked={hasEnchantmentTable} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnchantmentTable(!!checked)} />\r\n                        <Checkbox label=\"Ender Chest\" checked={hasEnderChest} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setEnderChest(!!checked)} />\r\n                        <Checkbox label=\"Furnace\" checked={hasFurnace} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setFurnace(!!checked)} />\r\n                        <Checkbox label=\"Portal\" checked={hasPortal} onChange={(ev:React.FormEvent<HTMLElement | HTMLInputElement> | undefined, checked: boolean | undefined) => setPortal(!!checked)} />\r\n                    </Stack>\r\n                    \r\n                    <Stack horizontal>\r\n                        <Stack.Item align=\"end\" styles={stackItemStyles}>\r\n                            <PrimaryButton text=\"Save\" onClick={() => { \r\n                                props.saveLocation(\r\n                                {\r\n                                    id: props.location.id,\r\n                                    name: name,\r\n                                    x: Number.parseInt(coordinate.x),\r\n                                    y: Number.parseInt(coordinate.y),\r\n                                    z: Number.parseInt(coordinate.z),\r\n                                    locationTypeId: categoryId,\r\n                                    hasAnvil: hasAnvil,\r\n                                    hasBed: hasBed,\r\n                                    hasEnchantmentTable: hasEnchantmentTable,\r\n                                    hasEnderChest: hasEnderChest,\r\n                                    hasPortal: hasPortal,\r\n                                    hasFurnace: hasFurnace,\r\n                                    notes: notes ? notes : \"\"\r\n                                });\r\n                                props.dismissPanel();\r\n                            }} />\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport { EditLocation };","C:\\Source\\robgray\\MinecraftMapper\\front\\src\\components\\LocationList\\OptionsDisplay.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"95"},{"ruleId":"93","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":22},{"ruleId":"97","severity":1,"message":"101","line":3,"column":24,"nodeType":"99","messageId":"100","endLine":3,"endColumn":34},{"ruleId":"97","severity":1,"message":"102","line":4,"column":20,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"91","replacedBy":"103"},{"ruleId":"93","replacedBy":"104"},{"ruleId":"97","severity":1,"message":"105","line":2,"column":17,"nodeType":"99","messageId":"100","endLine":2,"endColumn":26},{"ruleId":"97","severity":1,"message":"102","line":3,"column":20,"nodeType":"99","messageId":"100","endLine":3,"endColumn":34},{"ruleId":"97","severity":1,"message":"106","line":51,"column":20,"nodeType":"99","messageId":"100","endLine":51,"endColumn":28},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],["107"],["108"],"@typescript-eslint/no-unused-vars","'ActionButton' is defined but never used.","Identifier","unusedVar","'IIconProps' is defined but never used.","'ICheckboxProps' is defined but never used.",["107"],["108"],"'useEffect' is defined but never used.","'setNotes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]